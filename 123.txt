module seg7(hex,seg);
    input [3:0] hex;
    output reg [6:0] seg;

    always @(*) 
    begin
        if (state == 2'd0)
            led = 4'b0001;
        else if (state == 2'd1)
            led = 4'b0010;
        else if (state == 2'd2)
            led = 4'b0100;
        else
            led = 4'b0000;
    end
endmodule


module part4 (CLOCK_50, KEY, HEX0, HEX1, HEX2, HEX3, HEX4, HEX5);
    input CLOCK_50;
    input [0:0] KEY;
    output [6:0] HEX0, HEX1, HEX2, HEX3, HEX4, HEX5;

    reg [25:0] counter;
    reg [2:0] state;

    wire clk = CLOCK_50;

    always @(posedge clk) begin
        begin
            if (counter == 26'd49999999) 
            begin
                counter <= 0;
                if (state == 3'd5)
                    state <= 0;
                else
                    state <= state + 1;
            end 
            else
                counter <= counter + 1;
        end
    end

    reg [3:0] h5, h4, h3, h2, h1, h0;

    always @(*) 
    begin
        h5 = 4'hF; h4 = 4'hF; h3 = 4'hF; h2 = 4'hF; h1 = 4'hF; h0 = 4'hF;

        if (state == 3'd0) 
        begin
            h2 = 4'hd; 
            h1 = 4'hE; 
            h0 = 4'h1;
        end 
        else if (state == 3'd1) 
        begin
            h3 = 4'hd; 
            h2 = 4'hE; 
            h1 = 4'h1;
        end 
        else if (state == 3'd2) 
        begin
            h4 = 4'hd; 
            h3 = 4'hE; 
            h2 = 4'h1;
        end 
        else if (state == 3'd3) 
        begin
            h5 = 4'hd; 
            h4 = 4'hE; 
            h3 = 4'h1;
        end 
        else if (state == 3'd4) 
        begin
            h5 = 4'hE; 
            h4 = 4'h1; 
            h0 = 4'hd;
        end 
        else if (state == 3'd5) 
        begin
            h5 = 4'h1; 
            h1 = 4'hd; 
            h0 = 4'hE;
        end
    end


    seg7 s0(h0, HEX0);
    seg7 s1(h1, HEX1);
    seg7 s2(h2, HEX2);
    seg7 s3(h3, HEX3);
    seg7 s4(h4, HEX4);
    seg7 s5(h5, HEX5);
endmodule
